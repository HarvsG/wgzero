#! /bin/bash


CONFIGFOLDER=".wgzero"
WG0="/etc/wireguard/wg0.conf"
IPv6Prefix="1337:c0d3::"

Run(){
    IsRoot
    CheckPackages "wg iptables curl qrencode ipcalc"

    case "$1" in
    "install")
        Install
        ;;
    "list")
        List
        ;;
    "add")
        Add "$@"
        ;;
    "del")
        Del "$@"
        ;;
    "qr")
        QR "$2"
        ;;
    *)
        Print "Unknown command\n" "red"
        ;;
    esac
}

Print(){
    RED='\033[1;31m'
    GREEN='\033[0;32m'
    ORANGE='\033[0;33m'
    CYAN='\033[0;36m'
    NC='\033[0m'

    case "$2" in
    "red")
        echo -en "${RED}$1${NC}"
        ;;
    "cyan")
        echo -en "${CYAN}$1${NC}"
        ;;
    "orange")
        echo -en "${ORANGE}$1${NC}"
        ;;
    *)
        echo -en "${GREEN}$1${NC}"
        ;;
    esac
}

Read(){
    read -r INPUT
    if [[ "$INPUT" == "" ]]
    then VAL="$1"
    else VAL="$INPUT"
    fi
}

WriteConfig(){
    Print "$1 [$2]: " "orange"

    Read "$2"
    echo "$1=$VAL" >> "$CONFIGFOLDER/conf"
}

IsRoot(){
    if [[ ! "$EUID" -eq 0 ]]
    then
        Print "Must be run as root\n" "red"
        exit 1
    fi
}

CheckPackages(){
    for i in $1
    do 
        if [[ ! $(command -v "$i") ]]
        then
            Print "$i: command not found, please check required packages.\n" "red"
            exit 1
        fi
    done
}

SetInterface(){
    INTERFACES=$(ip l | grep -oP ": (\K[0-9a-z]*)" | grep -v lo)
    DEFAULT=$(echo "$INTERFACES" | head -1)

    Print "Available interfaces :\n" "cyan"
    echo "$INTERFACES"

    WriteConfig "Interface" "$DEFAULT"
}

GetConf(){
    grep -i "$1" "$CONFIGFOLDER/conf" | cut -d "=" -f 2
}

GenerateKeys(){
    /usr/bin/wg genkey \
    | tee "$1/priv.key" \
    | /usr/bin/wg pubkey > "$1/pub.key"
}

Init(){
    if [ -d "$CONFIGFOLDER" ] || [ -f "$WG0" ]
    then
        Print "Config folder .wgzero already exists, do you want to overwrite [y/n]? " "red"
        read -r CLEANUP
        if [ "$CLEANUP" == "y" ]
        then
            rm -rf "$CONFIGFOLDER" "$WG0"
            ip link del wg0 2>/dev/null
        else
            exit 1
        fi
    fi

    mkdir "$CONFIGFOLDER"
}

EnableIPForward(){
    sed -i 's/\#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"
    then
        sed -i 's/\#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/' /etc/sysctl.conf
        echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
    fi
    
    /usr/sbin/sysctl -p
}

Install(){
    Print "Initializing\n"
    Init
    
    Print "Writing configs\n"
    WriteConfig "Server" "$(curl -s ip.me)"
    WriteConfig "Port" "51820"
    WriteConfig "Subnet" "10.10.0.1/24"

    Print "Enable IPv6 [y/n]? " "orange"
    read -r INPUT
    [ "$INPUT" == "y" ] && echo "IPv6Prefix=$IPv6Prefix" >> "$CONFIGFOLDER/conf"

    SetInterface

    Print "Enable IP forward\n"
    EnableIPForward

    Print "Generate server keys\n"
    GenerateKeys "$CONFIGFOLDER"

    Print "Generate config file\n"
    IPv4Addr=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmin | tr -s " " | cut -d " " -f 2)

    cat >"$WG0" <<EOF
[Interface]
Address = $IPv4Addr/24
SaveConfig = true
PrivateKey = $(cat "$CONFIGFOLDER"/priv.key)
ListenPort = $(GetConf port)
PostUp = /usr/sbin/iptables -A FORWARD -i %i -j ACCEPT; /usr/sbin/iptables -A FORWARD -o %i -j ACCEPT; /usr/sbin/iptables -t nat -A POSTROUTING -o $(GetConf interface) -j MASQUERADE
PostDown = /usr/sbin/iptables -D FORWARD -i %i -j ACCEPT; /usr/sbin/iptables -D FORWARD -o %i -j ACCEPT; /usr/sbin/iptables -t nat -D POSTROUTING -o $(GetConf interface) -j MASQUERADE

EOF

    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"
    then
        IPv6Suffix=$(echo "$IPv4Addr" | cut -d "." -f 4 | xargs printf "%x")
        IPv6Addr="$IPv6Prefix$IPv6Suffix/120"
        sed -i "s#^Address.*#&, $IPv6Addr#g" "$WG0"
    fi

    chmod -v 600 "$WG0"
    
    Print "Enable service\n"
    wg-quick up wg0
    systemctl enable wg-quick@wg0

    Print "Done, make sure $(GetConf port)/UDP is open\n" "red"
}

SetClientIP(){
    PREFIX=$(GetConf subnet | cut -d "." -f 1,2,3)
    MIN=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmin | cut -d "." -f 4 | tr -d " ")
    MAX=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmax | cut -d "." -f 4 | tr -d " ")

    for i in $(seq "$MIN" "$MAX")
    do
        DEFAULT="$PREFIX.$i"
        grep -q "$DEFAULT" $WG0 || break
    done

    Print "Choose client IP [$DEFAULT]: " "orange"
    Read "$DEFAULT"
    CLIENT_IP="$VAL"
}

QR(){
    CFG="$CONFIGFOLDER/$1/conf"
    [ ! -f "$CFG" ] && Print "Client doesn't exist\n" "red" && exit 1
    /usr/bin/qrencode -t ansiutf8 < "$CFG"
}

List(){
    PUBKEYS=$(grep -i "publickey" "$WG0" | tr -d " " | cut -d "=" -f 2)
    for i in $PUBKEYS
    do
        CLIENT=$(grep -r "$i" "$CONFIGFOLDER" | cut -d "/" -f 2)
        IP=$(grep -i address "$CONFIGFOLDER/$CLIENT/conf" | tr -d " " | cut -d "=" -f 2)
        Print "$CLIENT $IP $i\n" "orange"
    done
}

Add(){
    NAME="$2"

    [[ ! "$NAME" ]] && exit 1
    [[ -d "$CONFIGFOLDER/$NAME" ]] && Print "Client already exists\n" "red" && exit 1

    mkdir "$CONFIGFOLDER/$NAME"
    GenerateKeys "$CONFIGFOLDER/$NAME"

    SetClientIP # return CLIENT_IP

    # writing configs
    TMP=$(mktemp)

    cat >"$CONFIGFOLDER/$NAME/conf" <<EOF
    # cat >"$CONFIGFOLDER/$NAME/conf" <<EOF
[Interface]
Address = $CLIENT_IP/32
PrivateKey = $(cat "$CONFIGFOLDER/$NAME/priv.key")

[Peer]
PublicKey = $(cat "$CONFIGFOLDER/pub.key")
Endpoint = $(GetConf server):$(GetConf port)
AllowedIPs = 0.0.0.0/0
EOF

    cat >>"$TMP" <<EOF 
# $NAME
[Peer]
PublicKey = $(cat "$CONFIGFOLDER/$NAME/pub.key")
AllowedIPs = $CLIENT_IP

EOF

    # handle IPv6
    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"
    then
        IPv6Suffix=$(echo "$CLIENT_IP" | cut -d "." -f 4 | xargs printf "%x")
        IPv6Addr="$IPv6Prefix$IPv6Suffix/128"

        sed -i -e "s|^Address.*$|&, $IPv6Addr|g" \
        -e "s|^AllowedIPs.*$|&, ::/0|g" \
        "$CONFIGFOLDER/$NAME/conf"

        sed -i "s|^AllowedIPs.*$|&, $IPv6Addr|g" "$TMP"
    fi

    # apply new config
    cat "$TMP" >> "$WG0" && rm -rf "$TMP"
    wg addconf wg0 <(wg-quick strip wg0)

    # show qr
    QR "$NAME"
}

Del(){
    CFG="$CONFIGFOLDER/$2"
    if [ -d "$CFG" ]
    then
        ENTRY=$(grep -m 1 -n "# $2" "$WG0" | cut -d ":" -f 1)
        sed -ie "$ENTRY,$((ENTRY + 4))d" "$WG0"

        wg set wg0 peer "$(cat "$CFG/pub.key")" remove
        wg addconf wg0 <(wg-quick strip wg0)

        rm -rf "$CFG"
    else
        Print "Client doesn't exist\n" "red"
    fi
}

Run "$@"